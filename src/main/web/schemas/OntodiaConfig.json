{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "EdgeStyle": {
            "properties": {
                "editable": {
                    "type": "boolean"
                },
                "linkStyle": {
                    "$ref": "#/definitions/LinkStyle"
                },
                "markerSource": {
                    "$ref": "#/definitions/LinkMarkerStyle"
                },
                "markerTarget": {
                    "$ref": "#/definitions/LinkMarkerStyle"
                }
            },
            "propertyOrder": [
                "markerSource",
                "markerTarget",
                "linkStyle",
                "editable"
            ],
            "type": "object"
        },
        "FullTextSearchSettings": {
            "description": "Full text search settings,\ndeveloper could use anything from search extensions of triplestore to regular expressions match\nSee wikidata and dbpedia examples for reusing full text search capabilities of Blazegraph and Virtuozo",
            "properties": {
                "extractLabel": {
                    "description": "When enabled, adds SPARQL patterns to try to extract label from IRI and\nmakes it available as `?extractedLabel` binding in `queryPattern`.",
                    "type": "boolean"
                },
                "prefix": {
                    "description": "Prefixes to use in full text search queries.",
                    "type": "string"
                },
                "queryPattern": {
                    "description": "SPARQL query pattern to search/restrict results by text token.\n\nParametrized variables:\n   - `${text}` text token\n   - `${dataLabelProperty}` `dataLabelProperty` property from the settings\n\nExpected bindings:\n   - `?inst` link type\n   - `?score` numerical score for ordering search results by relevance\n   - `?extractedLabel` (optional; if `extractLabel` is enabled)",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "prefix",
                "queryPattern",
                "extractLabel"
            ],
            "required": [
                "prefix",
                "queryPattern"
            ],
            "type": "object"
        },
        "LinkConfiguration": {
            "description": "Link abstraction configuration.",
            "properties": {
                "domain": {
                    "description": "Optional domain constraint for source element of the link.\nIf specified checks RDF type of source element to match one from this set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "IRI of the \"virtual\" link",
                    "type": "string"
                },
                "path": {
                    "description": "SPARQL predicate or pattern connecting source element to target element.\n\nExpected bindings (if it is a pattern):\n   - `?source` source element\n   - `?target` target element",
                    "type": "string"
                },
                "properties": {
                    "description": "Additional SPARQL patterns can be used for getting properties of the link.\n\nExpected bindings\n   - `?source` source element\n   - `?target` target element\n   - `?propType` link property type\n   - `?propValue` link property value",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "id",
                "domain",
                "path",
                "properties"
            ],
            "required": [
                "id",
                "path"
            ],
            "type": "object"
        },
        "LinkLabel": {
            "properties": {
                "attrs": {
                    "properties": {
                        "rect": {
                            "properties": {
                                "fill": {
                                    "type": "string"
                                },
                                "stroke": {
                                    "type": "string"
                                },
                                "stroke-width": {
                                    "type": "number"
                                }
                            },
                            "propertyOrder": [
                                "fill",
                                "stroke",
                                "stroke-width"
                            ],
                            "type": "object"
                        },
                        "text": {
                            "properties": {
                                "fill": {
                                    "type": "string"
                                },
                                "font-family": {
                                    "type": "string"
                                },
                                "font-size": {
                                    "type": [
                                        "string",
                                        "number"
                                    ]
                                },
                                "font-weight": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "bold",
                                                "bolder",
                                                "lighter",
                                                "normal"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "stroke": {
                                    "type": "string"
                                },
                                "stroke-width": {
                                    "type": "number"
                                },
                                "text": {
                                    "items": {
                                        "$ref": "#/definitions/LocalizedString"
                                    },
                                    "type": "array"
                                }
                            },
                            "propertyOrder": [
                                "fill",
                                "stroke",
                                "stroke-width",
                                "font-family",
                                "font-size",
                                "font-weight",
                                "text"
                            ],
                            "type": "object"
                        }
                    },
                    "propertyOrder": [
                        "rect",
                        "text"
                    ],
                    "type": "object"
                },
                "position": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "position",
                "title",
                "attrs"
            ],
            "type": "object"
        },
        "LinkMarkerStyle": {
            "properties": {
                "d": {
                    "type": "string"
                },
                "fill": {
                    "type": "string"
                },
                "height": {
                    "type": "number"
                },
                "stroke": {
                    "type": "string"
                },
                "strokeWidth": {
                    "type": "string"
                },
                "width": {
                    "type": "number"
                }
            },
            "propertyOrder": [
                "fill",
                "stroke",
                "strokeWidth",
                "d",
                "width",
                "height"
            ],
            "type": "object"
        },
        "LinkStyle": {
            "properties": {
                "connection": {
                    "properties": {
                        "fill": {
                            "type": "string"
                        },
                        "stroke": {
                            "type": "string"
                        },
                        "stroke-dasharray": {
                            "type": "string"
                        },
                        "stroke-width": {
                            "type": "number"
                        }
                    },
                    "propertyOrder": [
                        "fill",
                        "stroke",
                        "stroke-width",
                        "stroke-dasharray"
                    ],
                    "type": "object"
                },
                "connector": {
                    "properties": {
                        "args": {
                            "properties": {
                            },
                            "type": "object"
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "propertyOrder": [
                        "name",
                        "args"
                    ],
                    "type": "object"
                },
                "label": {
                    "$ref": "#/definitions/LinkLabel"
                },
                "properties": {
                    "items": {
                        "$ref": "#/definitions/LinkLabel"
                    },
                    "type": "array"
                }
            },
            "propertyOrder": [
                "connection",
                "label",
                "properties",
                "connector"
            ],
            "type": "object"
        },
        "LocalizedString": {
            "properties": {
                "datatype": {
                    "description": "Equals `xsd:string` if not defined.",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    },
                    "propertyOrder": [
                        "value"
                    ],
                    "required": [
                        "value"
                    ],
                    "type": "object"
                },
                "language": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "value",
                "language",
                "datatype"
            ],
            "required": [
                "language",
                "value"
            ],
            "type": "object"
        },
        "PropertyConfiguration": {
            "description": "Specifies property abstraction configuration",
            "properties": {
                "domain": {
                    "description": "Optional domain constraint for source element of the property.\nIf specified checks RDF type of source element to match one from this set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "IRI of the \"virtual\" link",
                    "type": "string"
                },
                "path": {
                    "description": "SPARQL predicate or pattern connecting source element to property value.\n\nExpected bindings (if it is a pattern):\n   - `?inst` source element\n   - `?value` property value",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "id",
                "domain",
                "path"
            ],
            "required": [
                "id",
                "path"
            ],
            "type": "object"
        },
        "SparqlDataProviderSettings": {
            "description": "Dataset-schema specific settings for SPARQL data provider.",
            "properties": {
                "classInfoQuery": {
                    "description": "SELECT query to retrieve data for each class in a set.\n\nParametrized variables:\n   - `${ids}` VALUES clause content with class IRIs\n   - `${schemaLabelProperty}` `schemaLabelProperty` property from the settings\n\nExpected output bindings:\n   - `?class`\n   - `?label` (optional)\n   - `?instcount` (optional)",
                    "type": "string"
                },
                "classTreeQuery": {
                    "description": "SELECT query to retreive class tree.\n\nParametrized variables:\n   - `${schemaLabelProperty}` `schemaLabelProperty` property from the settings\n\nExpected output bindings:\n   - `?class`\n   - `?label` (optional)\n   - `?parent` (optional)\n   - `?instcount` (optional)",
                    "type": "string"
                },
                "dataLabelProperty": {
                    "description": "Property path for querying instance data labels (elements, links).",
                    "type": "string"
                },
                "defaultPrefix": {
                    "description": "Default prefix to be used in every query.",
                    "type": "string"
                },
                "elementInfoQuery": {
                    "description": "CONSTRUCT query to retrieve data for each element (types, labels, properties).\n\nParametrized variables:\n   - `${ids}` VALUES clause content with element IRIs\n   - `${dataLabelProperty}` `dataLabelProperty` property from the settings\n   - `${propertyConfigurations}`\n\nExpected output format for triples:\n   - `?inst <https://ontodia.org/context/v1.json/type> ?class` element has type\n   - `?inst <https://ontodia.org/context/v1.json/label> ?label` element has label\n   - `?inst ?property ?value` element has value for a datatype property",
                    "type": "string"
                },
                "filterAdditionalRestriction": {
                    "description": "imposes additional filtering on elements within filter",
                    "type": "string"
                },
                "filterElementInfoPattern": {
                    "description": "how to fetch elements info when fetching data.",
                    "type": "string"
                },
                "filterRefElementLinkPattern": {
                    "description": "when fetching all links from element, we could specify additional filter",
                    "type": "string"
                },
                "filterTypePattern": {
                    "description": "SPARQL query pattern to retrieve transitive type sets for elements.\n\nExpected output bindings:\n   - `?inst` element IRI\n   - `?class` element type (there may be multiple or transitive types for an element)",
                    "type": "string"
                },
                "fullTextSearch": {
                    "$ref": "#/definitions/FullTextSearchSettings",
                    "description": "Full-text search settings."
                },
                "imageQueryPattern": {
                    "description": "Query pattern to retrieve image URL for an element.\n\nExpected bindings:\n   - `?inst` element IRI\n   - `?linkType` image property IRI\n   - `?image` result image URL",
                    "type": "string"
                },
                "linkConfigurations": {
                    "description": "Abstract links configuration - one could abstract a property path as a link on the diagram.",
                    "items": {
                        "$ref": "#/definitions/LinkConfiguration"
                    },
                    "type": "array"
                },
                "linkTypesInfoQuery": {
                    "description": "SELECT query to retrieve data for each link type in a set.\n\nParametrized variables:\n   - `${ids}` VALUES clause content with link type IRIs\n   - `${schemaLabelProperty}` `schemaLabelProperty` property from the settings\n\nExpected output bindings:\n   - `?link`\n   - `?label` (optional)\n   - `?instcount` (optional)",
                    "type": "string"
                },
                "linkTypesOfQuery": {
                    "description": "SELECT query to retrieve incoming/outgoing link types from specified element with statistics.\n\nParametrized variables:\n   - `${elementIri}`\n   - `${linkConfigurations}`\n\nExpected bindings:\n   - `?link`\n   - `?label` (optional)\n   - `?instcount` (optional)",
                    "type": "string"
                },
                "linkTypesPattern": {
                    "description": "Overridable part of `linkTypesQuery` with same output bindings.\n\nParametrized variables: none",
                    "type": "string"
                },
                "linkTypesQuery": {
                    "description": "SELECT query to retrieve initial link types.\n\nParametrized variables:\n   - `${linkTypesPattern}` `linkTypesPattern` property from the settings\n   - `${schemaLabelProperty}` `schemaLabelProperty` property from the settings\n\nExpected output bindings:\n   - `?link`\n   - `?label` (optional)\n   - `?instcount` (optional)",
                    "type": "string"
                },
                "linkTypesStatisticsQuery": {
                    "description": "SELECT query to retrieve statistics of incoming/outgoing link types for specified element.\n\nParametrized variables:\n   - `${linkId}`\n   - `${elementIri}`\n   - `${linkConfigurationOut}`\n   - `${linkConfigurationIn}`\n   - `${navigateElementFilterOut}` (optional; for blank node support only)\n   - `${navigateElementFilterIn}` (optional; for blank node support only)\n\nExpected bindings:\n   - `?link` link type\n   - `?inCount` incoming links count\n   - `?outCount` outgoing links count",
                    "type": "string"
                },
                "linksInfoQuery": {
                    "description": "SELECT query to retrieve all links between specified elements.\n\nParametrized variables:\n   - `${ids}` VALUES clause content with element IRIs\n   - `${linkConfigurations}`\n\nExpected output bindings:\n   - `?type` link type\n   - `?source` link source\n   - `?target` link target\n   - `?propType` (optional) link property type\n   - `?propValue` (optional) link property value",
                    "type": "string"
                },
                "openWorldLinks": {
                    "default": false,
                    "description": "(Experimental) Allows data provider to find links other than specified in `linkConfigurations`\nwhen `linkConfigurations` has at least one value set.",
                    "type": "boolean"
                },
                "openWorldProperties": {
                    "default": false,
                    "description": "(Experimental) Allows data provider to find element properties other than specified in\n`propertyConfigurations` when `propertyConfigurations` has at least one value set.",
                    "type": "boolean"
                },
                "propertyConfigurations": {
                    "description": "Abstract property configuration similar to abstract link configuration. Not type-specific yet.",
                    "items": {
                        "$ref": "#/definitions/PropertyConfiguration"
                    },
                    "type": "array"
                },
                "propertyInfoQuery": {
                    "description": "SELECT query to retrieve data for each datatype property in a set.\n\nParametrized variables:\n   - `${ids}` VALUES clause content with datatype property IRIs\n   - `${schemaLabelProperty}` `schemaLabelProperty` property from the settings\n\nExpected output bindings:\n   - `?property`\n   - `?label` (optional)",
                    "type": "string"
                },
                "queryPlanOptimiser": {
                    "description": "Query Optimizer, a sparql statement that can help the query plan evaluation",
                    "type": "string"
                },
                "schemaLabelProperty": {
                    "description": "Property path for querying schema labels in schema (classes, link types, properties).",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "defaultPrefix",
                "schemaLabelProperty",
                "dataLabelProperty",
                "fullTextSearch",
                "classTreeQuery",
                "classInfoQuery",
                "linkTypesQuery",
                "linkTypesPattern",
                "linkTypesInfoQuery",
                "propertyInfoQuery",
                "elementInfoQuery",
                "linksInfoQuery",
                "imageQueryPattern",
                "linkTypesOfQuery",
                "linkTypesStatisticsQuery",
                "filterRefElementLinkPattern",
                "filterTypePattern",
                "filterElementInfoPattern",
                "filterAdditionalRestriction",
                "linkConfigurations",
                "openWorldLinks",
                "propertyConfigurations",
                "openWorldProperties",
                "queryPlanOptimiser"
            ],
            "required": [
                "dataLabelProperty",
                "defaultPrefix",
                "elementInfoQuery",
                "filterAdditionalRestriction",
                "filterElementInfoPattern",
                "filterRefElementLinkPattern",
                "filterTypePattern",
                "fullTextSearch",
                "imageQueryPattern",
                "linkConfigurations",
                "linkTypesOfQuery",
                "linkTypesStatisticsQuery",
                "linksInfoQuery",
                "propertyConfigurations",
                "schemaLabelProperty"
            ],
            "type": "object"
        },
        "SupportedConfigName": {
            "enum": [
                "default",
                "nostats",
                "rsnostats",
                "wikidata"
            ],
            "type": "string"
        }
    },
    "properties": {
        "acceptBlankNodes": {
            "default": false,
            "description": "Allow blank nodes in navigation queries. Significantly increases complexity of the queries\nand may lead to unexpected query execution plans and timeouts in triple stores.",
            "type": "boolean"
        },
        "addToDefaultSet": {
            "default": false,
            "description": "`true` if persisted component should be added to the default set of the current user",
            "type": "boolean"
        },
        "autoZoom": {
            "description": "If true zoomToFit to call on each addElements event.",
            "type": "boolean"
        },
        "collapseNavigator": {
            "description": "Collapse navigator panel by default",
            "type": "boolean"
        },
        "defaultEdgeStyle": {
            "$ref": "#/definitions/EdgeStyle",
            "description": "Default custom style of the links"
        },
        "defaultNodeTemplate": {
            "description": "Default custom template of the elements",
            "type": "string"
        },
        "diagram": {
            "description": "Diagram identifier to display saved diagram.",
            "type": "string"
        },
        "edgeStyles": {
            "additionalProperties": {
                "$ref": "#/definitions/EdgeStyle"
            },
            "description": "Custom styles of the links",
            "propertyOrder": [
            ],
            "type": "object"
        },
        "findRelationshipQuery": {
            "description": "Sparql query to find a relationship between two elements.",
            "type": "string"
        },
        "groupBy": {
            "description": "Links to group the nodes",
            "items": {
                "properties": {
                    "linkDirection": {
                        "enum": [
                            "in",
                            "out"
                        ],
                        "type": "string"
                    },
                    "linkType": {
                        "type": "string"
                    }
                },
                "propertyOrder": [
                    "linkType",
                    "linkDirection"
                ],
                "required": [
                    "linkDirection",
                    "linkType"
                ],
                "type": "object"
            },
            "type": "array"
        },
        "hideHalo": {
            "description": "Disable navigation",
            "type": "boolean"
        },
        "hideNavigationConfirmation": {
            "description": "Disable navigation confirmation dialog, resource links will be followed without confirmation.",
            "type": "boolean"
        },
        "hideNavigator": {
            "description": "Disable navigator panel",
            "type": "boolean"
        },
        "hidePanels": {
            "description": "Disable side panels",
            "type": "boolean"
        },
        "hideScrollBars": {
            "description": "Disable scrollbars",
            "type": "boolean"
        },
        "hideToolbar": {
            "description": "Disable toolbar",
            "type": "boolean"
        },
        "id": {
            "description": "Used as source id for emitted events.",
            "type": "string"
        },
        "imageIris": {
            "description": "Array of link types to get images of elements.\nIf property imageQuery is defined, this property will be ignored.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "imageQuery": {
            "description": "Sparql SELECT query to get images of elements.\n\nParametrized with `VALUES(?element) {...}` and should contains the following bindings:\n  - `?element`: IRI of element on graph;\n  - `?image`: image of the element.",
            "type": "string"
        },
        "iri": {
            "description": "Iri to be used as a single diagram element\nIf property diagram or query is defined, this will be ignored.",
            "type": "string"
        },
        "iris": {
            "description": "Elements to display on initialization",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "leftPanelInitiallyOpen": {
            "type": "boolean"
        },
        "linkSettings": {
            "description": "Custom options for the links",
            "items": {
                "properties": {
                    "property": {
                        "type": "string"
                    },
                    "showLabel": {
                        "type": "boolean"
                    },
                    "visible": {
                        "type": "boolean"
                    }
                },
                "propertyOrder": [
                    "property",
                    "visible",
                    "showLabel"
                ],
                "required": [
                    "property",
                    "visible"
                ],
                "type": "object"
            },
            "type": "array"
        },
        "metadata": {
            "description": "Additional turtle data that will be parsed and attached to the saved diagram.",
            "type": "string"
        },
        "navigateTo": {
            "description": "URI to navigate after diagram created.\nNewly created diagram IRI will be appended as `diagram` query parameter.",
            "type": "string"
        },
        "nodeStyles": {
            "additionalProperties": {
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "image": {
                        "type": "string"
                    }
                },
                "propertyOrder": [
                    "image",
                    "color"
                ],
                "required": [
                    "color",
                    "image"
                ],
                "type": "object"
            },
            "description": "Custom images and colors of the elements",
            "propertyOrder": [
            ],
            "type": "object"
        },
        "nodeTemplates": {
            "additionalProperties": {
                "type": "string"
            },
            "description": "Custom templates of the elements",
            "propertyOrder": [
            ],
            "type": "object"
        },
        "persistChangesLabel": {
            "description": "Custom label for \"Save data\" button.",
            "type": "string"
        },
        "postSaving": {
            "description": "Controls whether Ontodia should navigate to a newly saved diagram.",
            "enum": [
                "navigate",
                "none"
            ],
            "type": "string"
        },
        "propertySuggestionQuery": {
            "description": "Sparql query to get suggested properties of elements.",
            "type": "string"
        },
        "providerSettings": {
            "$ref": "#/definitions/SparqlDataProviderSettings",
            "description": "Sparql data provider settings to override default settings.\nSee definition of `SparqlDataProviderSettings`."
        },
        "provisionQuery": {
            "description": "SPARQL query to store data that do not exist in the database",
            "type": "string"
        },
        "query": {
            "description": "SPARQL query to display data on layout.\nIf property diagram is defined, this property will be ignored.",
            "type": "string"
        },
        "queryParams": {
            "additionalProperties": {
                "type": "string"
            },
            "description": "Query parameters that will be appended to URL after diagram created.",
            "propertyOrder": [
            ],
            "type": "object"
        },
        "readonly": {
            "description": "When true saving the diagram is disabled and side panels are collapsed by default.",
            "type": "boolean"
        },
        "repositories": {
            "description": "Ids of repositories",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "requestLinksOnInit": {
            "default": true,
            "description": "Controls if component should re-request all links from data provider when showing existing\ngraph (via loading the diagram or executing CONSTRUCT query), if link is not found in the\ndata, it is shown as dashed. Setting this to false speeds up initialization and the links on\nthe diagram will be shown exactly as they were when the diagram was saved.",
            "type": "boolean"
        },
        "rightPanelInitiallyOpen": {
            "type": "boolean"
        },
        "saveDiagramLabel": {
            "description": "Custom label for \"Save diagram\" button.",
            "type": "string"
        },
        "settings": {
            "$ref": "#/definitions/SupportedConfigName",
            "default": "'default'",
            "description": "Configs are predefined configs for particular data sets.\nConfig specifies data provider to run and elements customizations to apply.\nLater customizations could be brought to the level of component configuration if needed."
        },
        "zoomRequireCtrl": {
            "description": "Set if zoom operation need ctrl or not",
            "type": "boolean"
        }
    },
    "propertyOrder": [
        "id",
        "diagram",
        "provisionQuery",
        "query",
        "iri",
        "iris",
        "requestLinksOnInit",
        "imageQuery",
        "imageIris",
        "settings",
        "providerSettings",
        "metadata",
        "navigateTo",
        "queryParams",
        "readonly",
        "addToDefaultSet",
        "nodeTemplates",
        "defaultNodeTemplate",
        "nodeStyles",
        "edgeStyles",
        "defaultEdgeStyle",
        "groupBy",
        "repositories",
        "linkSettings",
        "hidePanels",
        "hideNavigator",
        "collapseNavigator",
        "hideToolbar",
        "zoomRequireCtrl",
        "hideScrollBars",
        "autoZoom",
        "hideHalo",
        "propertySuggestionQuery",
        "acceptBlankNodes",
        "saveDiagramLabel",
        "persistChangesLabel",
        "findRelationshipQuery",
        "hideNavigationConfirmation",
        "postSaving",
        "leftPanelInitiallyOpen",
        "rightPanelInitiallyOpen"
    ],
    "type": "object"
}

