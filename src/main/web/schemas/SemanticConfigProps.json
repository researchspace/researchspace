{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "BNode": {
            "properties": {
                "_value": {
                    "type": "string"
                },
                "termType": {
                    "enum": [
                        "BlankNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "toString",
                "toJSON",
                "_value",
                "value",
                "hashCode",
                "equals",
                "cata",
                "isIri",
                "isLiteral",
                "isBnode"
            ],
            "required": [
                "_value",
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Iri": {
            "properties": {
                "_value": {
                    "type": "string"
                },
                "termType": {
                    "enum": [
                        "NamedNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "equals",
                "toString",
                "toJSON",
                "_value",
                "value",
                "hashCode",
                "cata",
                "isIri",
                "isLiteral",
                "isBnode"
            ],
            "required": [
                "_value",
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Literal": {
            "properties": {
                "_datatype": {
                    "$ref": "#/definitions/Iri"
                },
                "_lang": {
                    "type": "string"
                },
                "_value": {
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/Iri"
                },
                "language": {
                    "type": "string"
                },
                "termType": {
                    "enum": [
                        "Literal"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "_datatype",
                "_lang",
                "termType",
                "datatype",
                "language",
                "toString",
                "equals",
                "toJSON",
                "_value",
                "value",
                "hashCode",
                "cata",
                "isIri",
                "isLiteral",
                "isBnode"
            ],
            "required": [
                "_datatype",
                "_lang",
                "_value",
                "datatype",
                "language",
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Node": {
            "oneOf": [
                {
                    "$ref": "#/definitions/Iri"
                },
                {
                    "$ref": "#/definitions/Literal"
                },
                {
                    "$ref": "#/definitions/BNode"
                }
            ]
        }
    },
    "properties": {
        "bindings": {
            "additionalProperties": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/Node"
                    },
                    {
                        "type": "string"
                    }
                ]
            },
            "description": "A string indexed map (object), of key value pairs to inject into queries.\nThe key is the plain binding name (without ? or $) and the value is the plain IRI or literal value to be injected.\n\nThe interface and implementation is not yet stable and might be changed or even be removed in the future without notice.",
            "propertyOrder": [
            ],
            "type": "object"
        },
        "defaultGraphs": {
            "description": "Specifies the default graph, i.e. will be translated into a FROM <graphiri> clause.\nSeveral default graphs will be interpreted as a single merge graph, i.e. according to the SPARQL 1.1 standard:\n\"A default graph consisting of the RDF merge of the graphs referred to in the FROM clauses.\"\n\nDefaults to an empty array, which usually means all graphs.\nHowever, this may differ across database vendors (for example, in Stardog you will have to configure the database with query.all.graphs=true )\n\nSee <a href='https://www.w3.org/TR/rdf-sparql-query/#unnamedGraph' target='_blank' draggable='false'> https://www.w3.org/TR/rdf-sparql-query/#unnamedGraph </a> for details.\n\nThis functionality is still beta and not yet well tested.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "namedGraphs": {
            "description": "List of named graphs that will restrict any GRAPH ?g{} clause within the query body to the enumerated graphs.\n\nSee <a href='https://www.w3.org/TR/rdf-sparql-query/#namedGraphs' target='_blank' draggable='false'>https://www.w3.org/TR/rdf-sparql-query/#namedGraphs</a> for details.\n\nThis functionality is still beta and not yet well tested.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "repository": {
            "default": "default",
            "description": "Repository ID as registered in the platform repository manager.\nQueries will be executed/evaluated against this repository.",
            "type": "string"
        }
    },
    "propertyOrder": [
        "repository",
        "defaultGraphs",
        "namedGraphs",
        "bindings"
    ],
    "type": "object"
}

