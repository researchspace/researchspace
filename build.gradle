/**
 * ResearchSpace
 * Copyright (C) 2020, Â© Trustees of the British Museum
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    // Apply the war plugin to add support for Java webpapp build
    id 'war'

    // Apply java-library plugin to be able to use the whole researchspace as SDK
    id 'java-library'

    // To run app in the development mode with jetty container
    id 'org.gretty' version '3.1.5'

    // To run webpack-dev-server in the background
    id 'com.github.psxpaul.execfork' version '0.2.2'

    // To generate eclipse project files
    id 'eclipse'

    // To show task dependency graph
    id "com.dorongold.task-tree" version "1.5"

}


version = findProperty('buildVersion') ?: '4.0-SNAPSHOT'

// Load local secrets from gradle-local.properties file
def localPropertiesFile = rootProject.file('gradle-local.properties')
def localProperties = new Properties()
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { localProperties.load(it) }
}

// Helper function to get property from local file, environment variable, or default
def getSecretProperty = { key, defaultValue = '' ->
    return localProperties.getProperty(key) ?: System.getenv(key) ?: defaultValue
}

// Function to convert all properties from local file to JVM arguments
def getSecretJvmArgs = {
    def secretArgs = []
    localProperties.each { key, value ->
        secretArgs.add("-D${key}=${value}")
    }
    return secretArgs
}

// currently we use Java 11 for development
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


clean {
    delete "${projectDir}/src/main/webpapp/assets"
    delete "${projectDir}/node_modules"
}

// set default formatter for eclipse project generated by gradle
def eclipseJdtProps = new Properties()
file("${projectDir}/.eclipse/org.eclipse.jdt.core.prefs").withInputStream {
    eclipseJdtProps.load(it)
}
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
    jdt {
        file {
            withProperties { properties ->
                properties.putAll(eclipseJdtProps)
            }
        }
    }
}

// configuration for war packaging
war {
    from 'COPYING'
    from 'COPYING.GPLv3'

    manifest {
        attributes('Version': version)
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

farms {
    farm 'researchspace', {
        // setup blazegraph for local development
        webapp 'com.blazegraph:blazegraph-war:2.2.0-20160908.003514-6',
            contextPath: '/blazegraph',
            overlays: [':blazegraph-vocabularies']

        // setup digilib for local development
        webapp 'digilib:digilib-webapp:2.9.1',
            contextPath: '/digilib',
            initParameters: ["config-file": "./bundle-config/digilib-config.xml"]

        webapp project,
            contextPath: '/'
    }
}

products {
    product 'researchspace', {
        additionalFiles = [
            "./bundle-config/RWStore.properties": "./bundle-config/RWStore.properties",
            "./bundle-config/digilib-config.xml": "./bundle-config/digilib-config.xml",
            "./bundle-config/digilib-log4j-config.xml": "./bundle-config/digilib-log4j-config.xml",
            "./bundle-config/ZipReadme.txt": "./README.txt",
            "./bundle-config/Java11PrerequisitesCheckAndInstallationSteps.txt":"./Java11PrerequisitesCheckAndInstallationSteps.txt",
            "./LICENSE": "./LICENSE.txt",
            "./COPYING": "./COPYING",
            "./COPYING": "./COPYING.GPLv3",
            // add global.prop and set loadDefaultConfig=1
            "./bundle-config/runtime-data/config/global.prop": "./runtime-data/config/global.prop",
            // add ui.prop and IIIFConfig template for digilib as in the codebase ui.prop and IIIFConfig are for cantaloupe
            "./bundle-config/runtime-data/config/ui.prop": "./runtime-data/config/ui.prop",
            "./bundle-config/runtime-data/data/templates/http%3A%2F%2Fwww.researchspace.org%2Fresource%2FIIIFConfig.html": "./runtime-data/data/templates/http%3A%2F%2Fwww.researchspace.org%2Fresource%2FIIIFConfig.html",
            "${projectDir.getAbsolutePath()}/src/main/resources/org/researchspace/apps/default/config/shiro.ini": "./runtime-data/config/shiro.ini"
        ]
    }
}

def defaultJvmArgs = [

    // blazegraph options, for runAll
    "-Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile=./bundle-config/RWStore.properties",

    // for properties that get value from project.properties see gradle.properties file for more details
    "-Dconfig.environment.sparqlEndpoint=${project.properties['sparqlEndpoint']}",
    "-Dconfig.proxy.IIIF.targetUri=${project.properties['iiifScaler']}",
    "-Dconfig.environment.upload-iiifFolder=file://${projectDir.getAbsolutePath()}${project.properties['iiifFolder']}",

    // delopment storages for image upload functionality
    "-Dconfig.storage.images.type=nonVersionedFile",
    "-Dconfig.storage.images.mutable=true",

    // delopment storages for other media upload functionality
    "-Dconfig.storage.media.type=nonVersionedFile",
    "-Dconfig.storage.media.mutable=true",


    // tmp storage is needed for image upload functionality
    "-Dconfig.storage.tmp.type=nonVersionedFile",
    "-Dconfig.storage.tmp.mutable=true",

   // "-Dconfig.global.loadDefaultConfig=1",

    // Increase size limit for file upload
    "-Dorg.eclipse.jetty.server.Request.maxFormContentSize=104857600"
]

// configuration for local jetty container
gretty {
    // see actual jetty version in gradle.properties
    servletContainer = 'jetty9.4'
    httpPort = 10214
    contextPath = '/'

    // to serve web assets directly from src/main/webpapp folder
    // see https://akhikhl.github.io/gretty-doc/Gretty-configuration.html#_inplacemode
    // see https://akhikhl.github.io/gretty-doc/Fast-reload.html
    inplaceMode = 'hard'

    redeployMode = 'redeploy'

    // don't restart jetty when templates in the resource folder are changed
    fastReload = "${projectDir.getAbsolutePath()}/src/main/resources/org/researchspace/apps".toString()

    // use custom jetty-env.xml to disable websocket support
    contextConfigFile = "${projectDir}/jetty-env.xml"

    recompileOnSourceChange = false

    if (project.gradle.startParameter.taskNames.contains('buildZip')) {
        jvmArgs = defaultJvmArgs + [
            "-DruntimeDirectory=./runtime-data",
            "-Dorg.researchspace.config.baselocation=./runtime-data/config",

            "-Dconfig.storage.images.root=./runtime-data/images",
            "-Dconfig.storage.tmp.root=./runtime-data/tmp",

            "-Dconfig.storage.media.root=./runtime-data/media",

            "-Dlog4j.configurationFile=classpath:org/researchspace/logging/log4j2.xml",
        ]
    } else {
        jvmArgs = defaultJvmArgs + [
            "-Dconfig.storage.images.root=${project.properties['imageStorageRoot']}",
            "-Dconfig.storage.tmp.root=${java.nio.file.Files.createTempDirectory('images-tmp')}",

            "-Dconfig.storage.media.root=${project.properties['mediaStorageRoot']}",
          
            // set development mode to true to make sure that assets are always up to date
            // see bindings for AssetsMapProvider in MainGuiceModule.java
            "-DisDevelopmentMode=true",

            "-DruntimeDirectory=${projectDir.getAbsolutePath()}/runtime-data",

            // sets the location to the config folder to a temporary location for development
            "-Dorg.researchspace.config.baselocation=${projectDir.getAbsolutePath()}/runtime-data/config",


            // make apps writable in local development mode
            '-Dconfig.mutablePluginApps=true',

            // You may change the log4j settings by switching to one of the predefined log4j2 config files,
            // see /src/main/resources/org/researchspace/logging for options (descriptions of log behavior is given in the files).
            // - Development log files: log4j2-debug.xml, log4j2-trace.xml, log4j2-trace2.xml
            // - Production log files: log4j2.xml, log4j2-debug.xml
            "-Dlog4j.configurationFile=classpath:org/researchspace/logging/${findProperty('logLevel')}.xml",

            "-Dconfig.environment.shiroConfig=${projectDir.getAbsolutePath()}/src/main/resources/org/researchspace/apps/default/config/shiro.ini"
        ] + getSecretJvmArgs()
    }
}


// install npm dependencies in development mode
task npmInstall(type: Exec) {
    executable 'npm'
    args 'i', '--no-audit', '--no-fund', '--loglevel=error'
}

// we want to get clean node_modules when we are building on CI or production version locally
// see https://docs.npmjs.com/cli/ci
task npmInstallCi(type: Exec) {
    executable 'npm'
    args 'ci', '--no-audit', '--no-fund', '--loglevel=error'
}

// execute webpack in production mode with minifications, etc
task runProdWebpack(type: Exec) {
    executable 'npm'
    args 'run', 'prod'
}
tasks.runProdWebpack.dependsOn npmInstallCi

// task to execute webpack in watch mode, see ./webpack/package.json
task startWebpack(type: com.github.psxpaul.task.ExecFork) {
    // this is needed to fix this issue https://github.com/psxpaul/gradle-execfork-plugin/issues/61
    // see also https://github.com/springdoc/springdoc-openapi-gradle-plugin/pull/142
    workingDir = java.nio.file.Files.createTempDirectory('webpack').toFile()

    executable = 'npm'
    args = [ 'run', '--prefix', projectDir.getAbsolutePath(), 'dev' ]
    timeout = 1200

    // wait for message produces by webpack in minimal log mode
    waitForOutput = 'modules'
}
tasks.startWebpack.dependsOn npmInstall

// define custom start task so we have more convenient names than
// farmRunresearchspace, appRun, farmRunDebugresearchspace, appRunDebug, archiveProductresearchspace
task runAll
task run
task debugAll
task debug
task buildZip

// here we connect our custom tasks to builtins
// see https://stackoverflow.com/a/33960441 on why project.afterEvaluate is needed
project.afterEvaluate {
    // run production webpack build if we are building war package
    tasks.war.dependsOn runProdWebpack

    // run webpack in dev mode if we are running local gretty task
    tasks.prepareInplaceWebApp.dependsOn startWebpack


    // for some reason overlay explode task that is needed for farm overlays is not added as a dependency
    tasks.farmRunresearchspace.dependsOn tasks['farmOverlayArchiveresearchspaceblazegraph-war-2.2.0-20160908.003514-6.war']
    tasks.farmRunDebugresearchspace.dependsOn tasks['farmOverlayArchiveresearchspaceblazegraph-war-2.2.0-20160908.003514-6.war']
    tasks.buildProductresearchspace.dependsOn tasks['farmOverlayArchiveresearchspaceblazegraph-war-2.2.0-20160908.003514-6.war']

    // connect our custom tasks with tasks from gretty
    tasks.debugAll.dependsOn tasks.farmRunDebugresearchspace
    tasks.debug.dependsOn tasks.appRunDebug
    tasks.runAll.dependsOn tasks.farmRunresearchspace
    tasks.run.dependsOn tasks.appRun
    tasks.buildZip.dependsOn tasks.archiveProductresearchspace
}

// execute frontend tests
task testKarma(type: Exec) {
    workingDir "$projectDir/webpack"
    executable 'npm'
    args 'run', 'test-ci'
}
tasks.testKarma.dependsOn npmInstall
test.dependsOn testKarma

task runWiremock(type: JavaExec) {
    group = "Execution"
    description = "Run WireMock recorder"
    classpath = sourceSets.test.runtimeClasspath
    main = "com.github.tomakehurst.wiremock.standalone.WireMockServerRunner"
    args "--port", "10220"
}

repositories {
    mavenCentral()

    // for blazegraph war
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

    // for digilib war
    maven { url 'https://robcast.github.io/digilib-repo/maven-repo' }

    // needed for SMAL2 integration
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }

    // needed for unrelesead dependencies
    maven { url "https://jitpack.io" }
}

ext {
    RDF4J_VERSION = '3.5.1'
    LOG4J_VERSION = '2.24.3'
    JERSEY_VERSION = '2.30.1'
    JACKSON_VERSION = '2.10.3'
    GUICE_VERSION = '6.0.0'
    SHIRO_VERSION = '2.0.2'
    IMAGEIO_VERSION = '3.5'
}

configurations.all {
    // we use httpclient instead of httpclient-osgi used in RDF4J
    exclude group: "org.apache.httpcomponents", module: "httpclient-osgi"

    // excludes xml.bind-api from javax we already have jakarta one in the classpath
    exclude group: 'javax.xml.bind', module: 'jaxb-api'
}

dependencies {
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.994')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation 'org.semarglproject:semargl-rdf:0.7'

    compileOnly (
        "javax.servlet:javax.servlet-api:3.1.0",

        // add jetty as compile dependency so we get sources and javadocs and can debug it locally
        "org.eclipse.jetty:jetty-server:${jetty94_version}",
        "org.eclipse.jetty:jetty-servlet:${jetty94_version}"
    )

    api (
        //security
        // shiro-jaxrs includes shiro-core and shiro-web
        //
        // All shiro 1.x versions have bug with duplicated classes in the classpath, see https://issues.apache.org/jira/browse/SHIRO-632 . It will be solved in shiro 2.0
        "org.apache.shiro:shiro-jaxrs:${SHIRO_VERSION}",
    ) {
        // excludes old-style ws.rs-api used in shiro-jaxrs, we have jakarta ws.rs-api in the classpath coming from jersey
        exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
    }

    api (
        // RDF4J dependencies
        "org.eclipse.rdf4j:rdf4j-sail-nativerdf:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-sail-memory:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-sail-federation:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-binary:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-n3:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-nquads:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-ntriples:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-rdfjson:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-rdfxml:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-trig:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-trix:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-turtle:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-rio-jsonld:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-queryrender:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-queryresultio-sparqljson:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-queryresultio-text:${RDF4J_VERSION}",
        "org.eclipse.rdf4j:rdf4j-repository-manager:${RDF4J_VERSION}",

        // logging related dependencies
        "org.apache.logging.log4j:log4j-api:${LOG4J_VERSION}",
        "org.apache.logging.log4j:log4j-core:${LOG4J_VERSION}",
        "org.apache.logging.log4j:log4j-web:${LOG4J_VERSION}",
        "org.apache.logging.log4j:log4j-1.2-api:${LOG4J_VERSION}",
        "org.apache.logging.log4j:log4j-slf4j-impl:${LOG4J_VERSION}",
        "org.apache.logging.log4j:log4j-slf4j2-impl:${LOG4J_VERSION}",
        "org.apache.logging.log4j:log4j-jul:${LOG4J_VERSION}",
        "org.apache.logging.log4j:log4j-jcl:${LOG4J_VERSION}",

        // Jersey, JAX-RS implementation
        "org.glassfish.jersey.core:jersey-server:${JERSEY_VERSION}",
        "org.glassfish.jersey.containers:jersey-container-servlet:${JERSEY_VERSION}",
        "org.glassfish.jersey.media:jersey-media-json-jackson:${JERSEY_VERSION}",
        "org.glassfish.jersey.media:jersey-media-multipart:${JERSEY_VERSION}",
        "org.glassfish.jersey.inject:jersey-hk2:${JERSEY_VERSION}",

        // Jackson, for JSON handling
        "com.fasterxml.jackson.core:jackson-core:${JACKSON_VERSION}",
        "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VERSION}",
        "com.fasterxml.jackson.core:jackson-annotations:${JACKSON_VERSION}",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:${JACKSON_VERSION}",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${JACKSON_VERSION}",

        // Google Guice, for dependency injection
        "com.google.inject:guice:${GUICE_VERSION}",
        "com.google.inject.extensions:guice-servlet:${GUICE_VERSION}",

        //jersey-guice integration
        "org.glassfish.hk2:guice-bridge:2.6.1",


        "io.buji:buji-pac4j:8.2.0",
        "org.pac4j:javaee-pac4j:7.1.0",
        "org.pac4j:pac4j-oidc:5.7.7",
        "org.pac4j:pac4j-saml:5.7.7",

        // Apache commons stuff
        "org.apache.commons:commons-compress:1.20",
        "org.apache.commons:commons-lang3:3.10",

        // configuration
        "org.apache.commons:commons-configuration2:2.7",
        "commons-beanutils:commons-beanutils:1.9.4",

        //guava
        "com.google.guava:guava:28.2-jre",


        //security
        "org.apache.shiro:shiro-guice:${SHIRO_VERSION}",

        //templates
        "com.github.jknack:handlebars:4.2.0",

        //semantic versioning
        "com.github.zafarkhaja:java-semver:0.9.0",

        // java classes and resources reflection, i.e. annotation scanning on classpath
        "io.github.classgraph:classgraph:4.8.68",

        // http client
        "org.apache.httpcomponents:httpclient:4.5.12",

        // extracting the prefered mime type, for example, sparql servlet
        "org.commonjava.mimeparse:mimeparse:0.1.3.3",

        //pf4j plugin framework
        "ro.fortsoft.pf4j:pf4j:1.3.0",

        "org.mitre.dsmiley.httpproxy:smiley-http-proxy-servlet:1.12",

        //JsonPath
        "com.jayway.jsonpath:json-path:2.5.0",

        // JGit for Git storage support
        "org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r",
        "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:5.13.1.202206130422-r",

        "com.twelvemonkeys.imageio:imageio-tiff:${IMAGEIO_VERSION}",
        "com.twelvemonkeys.imageio:imageio-core:${IMAGEIO_VERSION}",
    ) 
    testImplementation (
        "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:${JERSEY_VERSION}",
        "org.hamcrest:hamcrest-library:1.3",
        "org.hamcrest:hamcrest-core:1.3",
        "com.novocode:junit-interface:0.11",
        "org.mockito:mockito-core:1.9.5",
        "junit:junit:4.10",
        "org.jukito:jukito:1.4.1",

        "com.github.researchspace:shiro-unit:c7205e5a65",
        //"com.github.sdorra:shiro-unit:1.0.1",

        "org.skyscreamer:jsonassert:1.5.0",
        "com.github.tomakehurst:wiremock-jre8:2.27.2"
    )
    testImplementation(
        "com.github.tomakehurst:wiremock-jre8:2.27.2"
    ) {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
}
