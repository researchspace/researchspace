[main]
## Parameters

# OIDC server discovery URI.
# see https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
# e.g. oidcDiscoverUri.value = http://local-keycloak:8090/auth/realms/my_realm/.well-known/openid-configuration
oidcDiscoveryUri = org.researchspace.security.sso.utils.ConfigParameterStringValueFactory
oidcDiscoveryUri.value = ${RS_SSO_OIDC_DISCOVERY_URI}

# https://tools.ietf.org/html/rfc6749#section-2.2
clientId = org.researchspace.security.sso.utils.ConfigParameterStringValueFactory
clientId.value = \${RS_SSO_CLIENT_ID}

# https://tools.ietf.org/html/rfc6749#section-2.3.1
clientSecret = org.researchspace.security.sso.utils.ConfigParameterStringValueFactory
clientSecret.value = \${RS_SSO_CLIENT_SECRET}

# Specify fields in the JWT claim, where roles can be found
# We use JSON path, see https://github.com/json-path/JsonPath for the syntax .
# Path can point to single string value or array of strings.
# Multiple paths can be provided, separated with comma.
# When specified in the .ini file, "$" in the JSON path need to be escaped with \.
# e.g \$.realm_access.roles, \$.resource_access.my_client.roles
roleJsonPaths = org.researchspace.security.sso.utils.ConfigParameterListValueFactory
roleJsonPaths.value = ${RS_SSO_OIDC_ROLE_JSON_PATHS}

scope = org.researchspace.security.sso.utils.ConfigParameterStringValueFactory
scope.value=openid email profile

principalNameAttribute = org.researchspace.security.sso.utils.ConfigParameterStringValueFactory
principalNameAttribute.value = preferred_username

# optional
# e.g defaultRoles.value = guest
defaultRoles = org.researchspace.security.sso.utils.ConfigParameterListValueFactory
defaultRoles.value = null

centralLogout = org.researchspace.security.sso.utils.ConfigParameterBooleanValueFactory
centralLogout.value = true

logoutRedirectUrl = org.researchspace.security.sso.utils.ConfigParameterStringValueFactory
logoutRedirectUrl.value = $platformBaseIri

## pac4j configuration

# https://tools.ietf.org/html/rfc6749#section-3.1.2
redirectUri = org.researchspace.security.sso.utils.RedirectUriValueFactory
redirectUri.instanceBaseUri = $platformBaseIri

shiroRealm = org.researchspace.security.sso.SSORealm
shiroRealm.principalNameAttribute = $principalNameAttribute

oidcConfig = org.pac4j.oidc.config.OidcConfiguration
oidcConfig.discoveryURI = $oidcDiscoveryUri
oidcConfig.clientId = $clientId
oidcConfig.secret = $clientSecret
oidcConfig.scope = $scope

authGenerator = org.researchspace.security.sso.OidcAuthorizationGenerator
authGenerator.defaultRoles = $defaultRoles
authGenerator.roleJsonPaths = $roleJsonPaths
authGenerator.textRealm = $textRealm

oidcClient = org.pac4j.oidc.client.OidcClient
oidcClient.authorizationGenerator = $authGenerator
oidcClient.configuration = $oidcConfig
oidcClient.callbackUrl = $redirectUri

clients = org.pac4j.core.client.Clients
clients.clients = $oidcClient

shiroProfileManagerFactory = org.researchspace.security.sso.ShiroProfileManagerFactory

config = org.pac4j.core.config.Config
config.clients = $clients
config.profileManagerFactory = $shiroProfileManagerFactory

subjectFactory = io.buji.pac4j.subject.Pac4jSubjectFactory
securityManager.subjectFactory = $subjectFactory

securityFilter = org.pac4j.jee.filter.SecurityFilter
securityFilter.config = $config
securityFilter.clients = OidcClient

# override authorizers to disable CSRF one which is enabled by default, we can't use default CSRF implementation from pac4j because we send many requests in parallel. For pac4j one to work one would need to send requests synchronously  
securityFilter.authorizers = isAuthenticated

callbackFilter = org.pac4j.jee.filter.CallbackFilter
callbackFilter.defaultClient = OidcClient
callbackFilter.config = $config

logoutFilter = org.pac4j.jee.filter.LogoutFilter
logoutFilter.config = $config
logoutFilter.localLogout = true
logoutFilter.centralLogout = $centralLogout
logoutFilter.defaultUrl = $logoutRedirectUrl
